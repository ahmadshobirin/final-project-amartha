// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	user "main-backend/bussiness/user"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Fetch provides a mock function with given fields: ctx, roleCode, page, perpage
func (_m *Repository) Fetch(ctx context.Context, roleCode string, page int, perpage int) ([]user.Domain, int, error) {
	ret := _m.Called(ctx, roleCode, page, perpage)

	var r0 []user.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []user.Domain); ok {
		r0 = rf(ctx, roleCode, page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Domain)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int); ok {
		r1 = rf(ctx, roleCode, page, perpage)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, roleCode, page, perpage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *Repository) FindByEmail(ctx context.Context, email string) (user.Domain, error) {
	ret := _m.Called(ctx, email)

	var r0 user.Domain
	if rf, ok := ret.Get(0).(func(context.Context, string) user.Domain); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(user.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Repository) FindByID(ctx context.Context, ID int) (user.Domain, error) {
	ret := _m.Called(ctx, ID)

	var r0 user.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) user.Domain); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(user.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data
func (_m *Repository) Store(ctx context.Context, data *user.Domain) (user.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 user.Domain
	if rf, ok := ret.Get(0).(func(context.Context, *user.Domain) user.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(user.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *user.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *Repository) Update(ctx context.Context, data *user.Domain) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.Domain) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
